$date
	Mon May 11 10:38:01 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module main $end
$var wire 1 ! abs_indexed_x $end
$var wire 1 " abs_indexed_y $end
$var wire 1 # absolute $end
$var wire 1 $ ac_ready $end
$var wire 1 % accumulator $end
$var wire 1 & branch $end
$var wire 1 ' break $end
$var wire 1 ( carry $end
$var wire 1 ) carrybit $end
$var wire 1 * clk $end
$var wire 1 + crossed $end
$var wire 1 , decimal $end
$var wire 1 - evenops $end
$var wire 1 . flags $end
$var wire 1 / higher_half $end
$var wire 1 0 i_adc $end
$var wire 1 1 i_and $end
$var wire 1 2 i_asl $end
$var wire 1 3 i_bcc $end
$var wire 1 4 i_bcs $end
$var wire 1 5 i_beq $end
$var wire 1 6 i_bit $end
$var wire 1 7 i_bmi $end
$var wire 1 8 i_bne $end
$var wire 1 9 i_bpl $end
$var wire 1 : i_brk $end
$var wire 1 ; i_bvc $end
$var wire 1 < i_bvs $end
$var wire 1 = i_clc $end
$var wire 1 > i_cld $end
$var wire 1 ? i_cli $end
$var wire 1 @ i_clv $end
$var wire 1 A i_cmp $end
$var wire 1 B i_cpx $end
$var wire 1 C i_cpy $end
$var wire 1 D i_dec $end
$var wire 1 E i_dex $end
$var wire 1 F i_dey $end
$var wire 1 G i_eor $end
$var wire 1 H i_inc $end
$var wire 1 I i_inx $end
$var wire 1 J i_iny $end
$var wire 1 K i_jmp $end
$var wire 1 L i_jsr $end
$var wire 1 M i_lda $end
$var wire 1 N i_ldx $end
$var wire 1 O i_ldy $end
$var wire 1 P i_lsr $end
$var wire 1 Q i_nop $end
$var wire 1 R i_ora $end
$var wire 1 S i_pha $end
$var wire 1 T i_php $end
$var wire 1 U i_pla $end
$var wire 1 V i_plp $end
$var wire 1 W i_rol $end
$var wire 1 X i_ror $end
$var wire 1 Y i_rti $end
$var wire 1 Z i_rts $end
$var wire 1 [ i_sbc $end
$var wire 1 \ i_sec $end
$var wire 1 ] i_sed $end
$var wire 1 ^ i_sei $end
$var wire 1 _ i_sta $end
$var wire 1 ` i_stx $end
$var wire 1 a i_sty $end
$var wire 1 b i_tax $end
$var wire 1 c i_tay $end
$var wire 1 d i_tsx $end
$var wire 1 e i_txa $end
$var wire 1 f i_txs $end
$var wire 1 g i_tya $end
$var wire 1 h ignored $end
$var wire 1 i immediate $end
$var wire 1 j implied $end
$var wire 1 k indirect $end
$var wire 1 l indirect_x $end
$var wire 1 m indirect_y $end
$var wire 1 n interrupt $end
$var wire 1 o isEven $end
$var wire 1 p isOdd $end
$var wire 16 q memIn [15:0] $end
$var wire 8 r memOut [7:0] $end
$var wire 1 s modify_ac $end
$var wire 1 t modify_x $end
$var wire 1 u negative $end
$var wire 8 v newvalue [7:0] $end
$var wire 1 w oddops $end
$var wire 8 x operand [7:0] $end
$var wire 1 y overflow $end
$var wire 1 z relative $end
$var wire 1 { stack_inst $end
$var wire 1 | wen $end
$var wire 16 } write_address [15:0] $end
$var wire 1 ~ x_ready $end
$var wire 1 !" zero $end
$var wire 1 "" zerofourc $end
$var wire 1 #" zpg_absolute $end
$var wire 1 $" zpg_indexed_x $end
$var wire 1 %" zpg_indexed_y $end
$var reg 16 &" cycles [15:0] $end
$var reg 8 '" inst [7:0] $end
$var reg 1 (" newinst $end
$var reg 16 )" pc [15:0] $end
$var reg 8 *" res [7:0] $end
$var reg 8 +" sr [7:0] $end
$var reg 16 ," state [15:0] $end
$var reg 8 -" temp_low [7:0] $end
$var reg 1 ." verbose $end
$var reg 16 /" waddr [15:0] $end
$var reg 1 0" write_enable $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x0"
b0xxxxxxxx /"
0."
bx -"
b1010 ,"
b0 +"
bx *"
b0 )"
0("
bx '"
b0 &"
x%"
x$"
x#"
x""
0!"
0~
bx }
x|
x{
xz
0y
bx x
xw
bx v
0u
xt
xs
bx r
b0 q
xp
xo
0n
xm
xl
xk
xj
xi
0h
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
0,
0+
1*
x)
0(
0'
x&
x%
0$
x#
x"
x!
$end
#500
0*
#1000
bx0x0x00xxxxxxxxx }
b1 q
b10101001 r
b10101001 x
b1 &"
b0 ,"
b1 )"
1*
#1500
0*
#2000
b1 v
1s
1M
0O
0)
0#
0N
0#"
0j
0!
1i
1w
0-
0""
0&
0R
01
0G
00
0_
0A
0[
02
0W
0P
0X
0`
0D
0H
0.
0"
0$"
0%
09
07
0;
0<
03
04
08
05
0B
0C
0=
0\
0?
0^
0@
0>
0]
0{
0T
0V
0S
0U
0a
0%"
0l
0m
0z
b10 q
0p
1o
1/
06
0K
0t
1$
0~
b0xxxxxxxx }
b10 &"
b10 )"
1("
b10101001 '"
0:
0L
0Y
0Z
0b
0c
0d
0e
0f
0g
0Q
0E
0F
0I
0J
0k
b1 ,"
b1 r
b1 x
1*
#2500
0*
#3000
b10001101 v
b11 q
0$
b10001101 r
b10001101 x
b11 &"
b11 )"
b0 ,"
1*
#3500
0*
#4000
0s
1#
0M
0i
1_
bx v
b100 q
0$
b100 &"
b100 )"
b10001101 '"
b1 ,"
b0 r
b0 x
1*
#4500
0*
#5000
b1000000000 }
b101 q
b10 r
b10 x
b101 &"
b1 *"
b11 ,"
10"
1|
b0 -"
b101 )"
1*
#5500
0*
#6000
b110 q
b1010100100000000 }
b110 &"
b110 )"
b0 ,"
00"
0|
b10101001 r
b10101001 x
1*
#6500
0*
#7000
b101 v
1s
1M
1$
0#
1i
0_
1w
b0xxxxxxxx }
b111 q
b101 r
b101 x
b111 &"
b111 )"
b10101001 '"
b1 ,"
1*
#7500
0*
#8000
b10001101 v
b1000 q
0$
b1000 &"
b1000 )"
b0 ,"
b10001101 r
b10001101 x
1*
#8500
0*
#9000
b100000000 }
0s
1#
0M
0i
1_
bx v
b1001 q
0$
b1 r
b1 x
b1001 &"
b1001 )"
b10001101 '"
b1 ,"
1*
#9500
0*
#10000
b1010 q
b1000000001 }
b1010 &"
b101 *"
b11 ,"
10"
1|
b1 -"
b1010 )"
b10 r
b10 x
1*
#10500
0*
#11000
b1010100100000001 }
b1011 q
b10101001 r
b10101001 x
b1011 &"
b1011 )"
b0 ,"
00"
0|
1*
#11500
0*
#12000
b1000 v
1s
1M
1$
0#
1i
0_
1w
b1100 q
b0xxxxxxxx }
b1100 &"
b1100 )"
b10101001 '"
b1 ,"
b1000 r
b1000 x
1*
#12500
0*
#13000
b10 v
b1101 q
0$
b10 r
b10 x
b1101 &"
b1101 )"
b0 ,"
1*
#13500
0*
#14000
bx v
0s
0M
0i
0w
0R
b1110 q
0/
0$
b1110 &"
b1110 )"
b10 '"
b1 ,"
1*
#14500
0*
#15000
b1111 q
bx r
bx x
b1111 &"
b1111 )"
1*
#15500
0*
#16000
b10000 q
b10000 &"
b10000 )"
b10 ,"
1*
#16500
0*
#17000
b10001 &"
b100 ,"
1*
#17500
0*
#18000
1*
